{
	"root": [
		{
			"id": 0,
			"parent": -1,
			"text": "ROOT",
			"relation": "null"
		},
		{
			"id": 1,
			"parent": 0,
			"text": "This paper proposes a novel composite kernel for relation extraction . <S>",
			"relation": "ROOT"
		},
		{
			"id": 2,
			"parent": 1,
			"text": "The composite kernel consists of two individual kernels : ",
			"relation": "elab-addition"
		},
		{
			"id": 3,
			"parent": 2,
			"text": "an entity kernel ",
			"relation": "elab-enum_member"
		},
		{
			"id": 4,
			"parent": 3,
			"text": "that allows for entity-related features ",
			"relation": "elab-addition"
		},
		{
			"id": 5,
			"parent": 3,
			"text": "and a convolution parse tree kernel ",
			"relation": "joint"
		},
		{
			"id": 6,
			"parent": 5,
			"text": "that models syntactic information of relation examples . <S>",
			"relation": "elab-addition"
		},
		{
			"id": 7,
			"parent": 1,
			"text": "The motivation of our method is to fully utilize the nice properties of kernel methods ",
			"relation": "elab-addition"
		},
		{
			"id": 8,
			"parent": 7,
			"text": "to explore diverse knowledge for relation extraction . <S>",
			"relation": "enablement"
		},
		{
			"id": 9,
			"parent": 10,
			"text": "Our study illustrates ",
			"relation": "attribution"
		},
		{
			"id": 10,
			"parent": 7,
			"text": "that the composite kernel can effectively capture both flat and structured features ",
			"relation": "result"
		},
		{
			"id": 11,
			"parent": 10,
			"text": "without the need for extensive feature engineering , ",
			"relation": "elab-addition"
		},
		{
			"id": 12,
			"parent": 10,
			"text": "and can also easily scale to include more features . <S>",
			"relation": "joint"
		},
		{
			"id": 13,
			"parent": 14,
			"text": "Evaluation on the ACE corpus shows ",
			"relation": "attribution"
		},
		{
			"id": 14,
			"parent": 1,
			"text": "that our method outperforms the previous best-reported methods ",
			"relation": "evaluation"
		},
		{
			"id": 15,
			"parent": 14,
			"text": "and significantly outperforms previous two dependency tree kernels for relation extraction . <S>",
			"relation": "joint"
		}
	]
}